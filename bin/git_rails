#!/bin/bash

set -x

function help {
  echo -e "\nUsage:"
  echo -e "\tgit-rails [-d] [-v] [-y] [src_ref] [dest_ref]"
  echo -e "\tgit-rails -h"
  echo "Flags:"
  echo -e "\t-d\tdry-run: display pending changes and exit"
  echo -e "\t-v\tverbose: display pending changes, prompt to continue, display command output"
  echo -e "\t-y\tauto-confirm: in verbose mode, apply pending changes without prompting"
  echo
  echo -e "\tsrc_ref\t\tBranch/ref you're coming from; defaults to ORIG_HEAD"
  echo
  echo -e "\tdest_ref\tBranch/ref you're ending at; defaults to HEAD"
  echo -e "\t\t\tUse with care; see README for more details"
  echo
  echo -e "Web: https://github.com/brysgo/git-rails"
  echo
  exit 0
}

dry_run=0
verbose=0
confirm=0
out_target="/dev/null"

optspec=":vdyh-:"
while getopts "$optspec" optchar; do
  case "${optchar}" in
    -)
      case "${OPTARG}" in
        dry-run | dry_run)
          dry_run=1
          verbose=1
          ;;
        verbose)
          verbose=1
          confirm=1
          out_target="/dev/stdout"
          ;;
        auto-confirm | auto_confirm)
          confirm_opt=0
          ;;
        help)
          help
          ;;
      esac;;
    d)
      dry_run=1
      verbose=1
      ;;
    v)
      verbose=1
      confirm=1
      out_target="/dev/stdout"
      ;;
    y)
      confirm_opt=0
      ;;
    h)
      help
      ;;
  esac
done
if [ "$verbose" -eq 1 -a ! -z "$confirm_opt" ]; then
  confirm=$confirm_opt
fi
shift $((OPTIND -1))

old_ref=$1
new_ref=$2

if [ -z "$old_ref" ]; then
  old_ref=`git rev-parse ORIG_HEAD`
fi

if [ -z "$new_ref" ]; then
  new_ref=`git rev-parse HEAD`
fi

files_changed=`git diff $old_ref $new_ref --name-status`

# CHECK IF WE NEED TO DO A BUNDLE
bundle_changed=`echo "$files_changed" | grep $'M\tGemfile.lock'`

# CHECK IF WE NEED TO SPIN SOME YARN
yarn_changed=`echo "$files_changed" | grep $'M\tyarn.lock'`

migrations=`git diff --name-status $old_ref $new_ref -- db/migrate | grep '^[AD]'`

if [ "$verbose" -eq 1 ]; then
  if [ ! -z "$bundle_changed" -o ! -z "$yarn_changed" ]; then
    echo -e "\nPrep needed:"
    if [ ! -z "$bundle_changed" ]; then
      echo -e "\t- bundle"
    fi
    if [ ! -z "$yarn_changed" ]; then
      echo -e "\t- yarn"
    fi
  fi
  if [ ! -z "$migrations" ]; then
    echo -e "\nMigrations needed:\n${migrations}"
  fi
  if [ -z "$bundle_changed" -a -z "$yarn_changed" -a -z "$migrations" ]; then
    echo -e "\nNo changes necessary\n"
    exit 0
  fi
  echo
  if [ "$dry_run" -eq 1 ]; then
    exit 0
  elif [ "$confirm" -eq 1 ]; then
    read -p "Continue? [Yn]: " confirm
    [[ $confirm =~ ^[Nn] ]] && echo && exit 0
  fi
fi

if [ ! -z "$migrations" ]; then
  echo "Running migrations!"
  EARLIEST_DOWN_MIGRATION=$(echo $migrations | grep '^[D]' | awk -F'_' '{print $1}' | awk -F/ '{print $3}' | sort -n | head -n 1)

  if [ "$EARLIEST_DOWN_MIGRATION" ]
  then
    ROLLBACK_FILENAME=$(find db/migrate -maxdepth 1 -type f -name "*.rb" | awk -F'/' -v EARLIEST_DOWN_MIGRATION=$EARLIEST_DOWN_MIGRATION '{split($NF, a, "_"); if (a[1] < EARLIEST_DOWN_MIGRATION) print $0}' | sort -n | tail -n 1)
    ROLLBACK_VERSION=$(echo $ROLLBACK_FILENAME | awk -F'/' '{print $NF}' | awk -F'_' '{print $1}')

    for migration in $migrations
    do
      # CHECK THE MIGRATION TYPE AND CONTINUE TO THE FILENAME
      if [ $migration == "D" ]; then
        migration_type="down"
        continue
      elif [ $migration == "A" ]; then
        migration_type="up"
        continue
      fi

      # CHECKOUT DOWN MIGRATION AND SAVE PATH FOR CLEANUP
      if [[ $migration_type == "down" ]]; then
        git checkout "$old_ref" -- "$migration"
        migration_cleanup="$migration_cleanup $migration"
      fi
    done

    # ROLLBACK MIGRATIONS
    bundle exec rails db:migrate VERSION=$ROLLBACK_VERSION

    # CLEAN UP DOWN MIGRATIONS
    if [ ! -z "$migration_cleanup" ]; then
      git reset $new_ref -- $migration_cleanup
      rm $migration_cleanup
    fi
  fi

  # RUN MIGRATIONS
  bundle exec rails db:migrate
fi


# okay, now actually run whatever's needed
if [ ! -z "$bundle_changed" ]; then
  echo "Your Gemfile.lock has changed, running bundle"
  bundle install
  docker-compose run --rm application bundle install
fi

if [ ! -z "$yarn_changed" ]; then
  echo "Your yarn.lock has changed, running yarn"
  yarn
fi
